import logging
from datetime import datetime, timedelta
import pandas as pd

# Environment parameters
env_params = {
    'initial_balance': 10000,
    'transaction_cost': 0.001,
    'use_position_profit': True,
    'use_holding_bonus': True,
    'use_trading_penalty': True
}

# PPO parameters 
ppo_params = {
    'learning_rate': 3e-4,
    'n_steps': 1024,
    'batch_size': 256,
    'n_epochs': 10,
    'gamma': 0.99,
    'gae_lambda': 0.95,
    'clip_range': 0.2,
    'ent_coef': 0.01,
    'vf_coef': 0.5,
    'max_grad_norm': 0.5,
    'target_kl': 0.03
}


# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

try:
    logging.info("Initializing UnifiedTradingAgent with Sharpe optimization.")
    agent = UnifiedTradingAgent(optimize_for_sharpe=True)
except Exception as e:
    logging.error(f"Error initializing UnifiedTradingAgent: {e}")
    raise

# Training parameters
stock_names = ['AAPL', 'MSFT', 'TSLA', 'GOOG', 'NVDA']
train_start_date = datetime.now() - timedelta(days=365*2)  # 2 years of training data
train_end_date = datetime.now() - timedelta(days=30)  # Up to last month

logging.info(f"Training agent on stocks: {stock_names}")
logging.info(f"Training period: {train_start_date.date()} to {train_end_date.date()}")

try:
    # Train the agent
    metrics = agent.train(
        stock_names=stock_names,
        start_date=train_start_date,
        end_date=train_end_date, 
        env_params=env_params,
        ppo_params=ppo_params
    )
    logging.info("Training completed successfully.")
except Exception as e:
    logging.error(f"Error during training: {e}")
    raise

try:
    # Extract portfolio allocations and history
    portfolio_history = agent.portfolio_history
    positions_history = agent.positions_history
    
    logging.info("Successfully extracted portfolio and positions history.")
except Exception as e:
    logging.error(f"Error extracting portfolio history: {e}")
    raise

try:
    # Create DataFrame with allocations over time 
    dates = pd.date_range(train_start_date, train_end_date, periods=len(positions_history))
    allocations_df = pd.DataFrame(positions_history, index=dates)
    logging.info("Portfolio allocations DataFrame created successfully.")
except Exception as e:
    logging.error(f"Error creating allocations DataFrame: {e}")
    raise

# Print results
logging.info("Training Metrics:")
for metric, value in metrics.items():
    logging.info(f"{metric}: {value:.4f}")

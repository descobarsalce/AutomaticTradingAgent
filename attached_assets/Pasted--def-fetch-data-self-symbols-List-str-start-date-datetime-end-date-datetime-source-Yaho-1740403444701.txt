
    def fetch_data(self, symbols: List[str], start_date: datetime, end_date: datetime, source="Yahoo Finance") -> pd.DataFrame:
        """Fetch data using source hierarchy: SQL -> Alpha Vantage -> YFinance"""
        if isinstance(symbols, str):
            symbols = [s.strip() for s in symbols.split(',') if s.strip()]
        elif isinstance(symbols, list):
            symbols = [s.strip() for s in symbols if s.strip()]

        if not symbols:
            raise ValueError("No symbols provided")

        result_df = pd.DataFrame()
        for symbol in symbols:
            df = None
            if source != "Yahoo Finance" and source != "Alpha Vantage":
                # Try SQL first
                try:
                    df = self._sql_handler.get_cached_data(symbol, start_date, end_date)
                    if df is not None and not df.empty:
                        logger.info(f"Retrieved {symbol} data from SQL cache")
                except SQLAlchemyError as e:
                    logger.warning(f"SQL error for {symbol}: {e}")
    
            # Try Alpha Vantage if SQL failed
            if (df is None or df.empty) and self._alpha_vantage:
                try:
                    df = self._alpha_vantage.fetch_data(symbol, start_date, end_date)
                    if not df.empty:
                        logger.info(f"Retrieved {symbol} data from Alpha Vantage")
                        self._sql_handler.cache_data(symbol, df, start_date, end_date)
                except Exception as e:
                    logger.warning(f"Alpha Vantage error for {symbol}: {e}")

            # Try YFinance as last resort
            if df is None or df.empty:
                try:
                    df = self._yfinance.fetch_data(symbol, start_date, end_date)
                    if not df.empty:
                        logger.info(f"Retrieved {symbol} data from YFinance")
                        self._sql_handler.cache_data(symbol, df)
                except Exception as e:
                    logger.error(f"YFinance error for {symbol}: {e}")

            if df is not None and not df.empty:
                df.columns = [f'{col}_{symbol}' for col in df.columns]
                result_df = pd.concat([result_df, df], axis=1)
            else:
                logger.error(f"Failed to fetch data for {symbol} from all sources")

        if result_df.empty:
            raise ValueError("No data retrieved for any symbols")

        return result_df.copy()
